{"name":"Soundsync","tagline":"A wireless distributed sound system enabling synchronous audio playback between multiple devices","body":"# Abstract\r\nThe SoundSync project is an Android smartphone application allowing users to stream audio content with their friends. The system implements a standard wifi-direct connection between devices. The following report outlines the backend design of the system including the design rationale and implementation of the various course concepts integrated within our app including: peer to peer networks, Syn ack ack protocol, device clock time synchronization (christians algorithm), and asynchronous message passing. Additionally this report will detail the elements of SoundSync that make this application a distributed system including but not limited to: heterogeneity, concurrency, no global clock, no global state, resource sharing, independant failures, scalability, and parallel activities.\r\n\r\n# Project Statement\r\nUntil recently, the mainstream approach to distribute sound throughout a house is to have one or more speakers in each room and connect them with wires to an amplifier which in turn is connected to a playback device. There are multiple problems with this process, the first being that it involves wires. Left unconcealed, wires are not aesthetically pleasing. On the other hand, to conceal them requires technical knowledge which can be costly and/or time consuming. The other problem is that the sound is being controlled from one place. When in a separate area, altering the sound becomes cumbersome due to the centralized control. Ultimately this approach, with all its flaws, serves its intended purpose but we decided to see what was possible if we eliminated the wires and decentralized the controller.   \r\nSoundSync is a distributed sound system enabling synchronous wireless playback of audio between multiple devices. The goal of the project is to build a system capable of allowing multiple devices to connect to one another and listen as well as control the sound on each connected device in the network. The scope of the prototype will be to create an application which will allow for synchronous playback of audio between devices. Possible extensions if time permits are allowing different devices to take control of the audio being played and extending the system to include other devices.   \r\n\r\n\r\n\r\n# System Requirements\r\n\r\n## Distributed System Requirements:\r\nRequirement                       How it was Met                                    Concurrency\r\nEach instance of the application running on a different device executes its procedure independently of any other devices state. communication is executed via message passing and independent process states\r\nHeterogeneity\r\nThe application is capable of running on any capable android device additionally the host of the connection (the first device to connect) can be any capable device as well. \r\nScalability\r\nThe peer to peer structure of the network allows peers to connect at any point in time without disrupting the system. \r\nResource sharing\r\nAudio files are sent to the users and message passing is done using the peer to peer network built on socket eliminate the need for shared memory between devices\r\n\r\n## Preliminary System Requirements:\r\nThe application must be able to stream audio services \r\nThe application must not exceed a 100-300 ms round-trip delay \r\nThe application must have a synchronous distribution state.\r\nThe application must provide media synchronization to a standard within 50 ms.\r\nThe application must scale to meet the needs of multiple users concurrently\r\nThe quality of service within our system must remain consistent across all platforms without data loss\r\nDeployments of the system must act synchronously without the use of a global clock\r\nResource Sharing must be accomplished in a timely and efficient manner.\r\nPeers must be able to connect and disconnect without disrupting streaming service\r\nEach peer must be able to  receive and send audio files\r\nEach peer must send data to at most two other peers\r\nThe application must broadcast data to all connected devices \r\n\r\n# System Architecture\r\n\r\nThe architecture of SoundSync is three-layer solution implemented using a real-time transfer protocol over a wifi-direct peer to peer network. The three layers were defined by abstracting away the networking infrastructure from the application which resulted in the networking, protocol and application layers. \r\n\r\nThe lowest layer of the application is responsible all low level networking. It is implemented using Android’s Wifi-Direct Peer2Peer api. By using the api the application was able to create a wireless hotspot and enable a network service for peers to find. A peer that creates a hotspot and provides a network service is designated in SoundSync as a “Super-Peer”. On the other hand, peers are able to discover the hotspot by searching for wifi connections hosted by super-peers and select one to connect to. Once a connection to established control of the application is transferred the the protocol layer for both the peers although the super-peer also maintains the thread responsible for listening and handling incoming connections. \r\n\r\nThe protocol layer is the largest part of the application and is responsible for handling the all communication between peers within the system. Due to the limitation of the Wifi-Direct Peer2Peer api, once a connection is established a peer is only aware of the super-peer’s  ip address. Therefore, the first step in the protocol is for the peer to send a handshake message to the super-peer. When the super-peer receives the handshake message it traverses through the tree of peers looking for the first peer with a opening for the new peer. Once it locates the opening it sends a add-peer message which includes the ip address of the new peer to the peer with the opening. The peer that receives the add-peer message add the ip address to its list of peers and begins transmitting to it. Figure 1 demonstrates a typical handshake for a new peer.\r\n\r\n        \r\nOnce the handshake is complete the application the transmission of data begins. The data transmission is comprised of multiple components responsible for receiving, sending, encoding and decoding messages. Each component runs on a separate thread to increase transmission rates as well as to not block the main thread. Due to the nature of objects operating on separate threads all communication between the components are performed through message queues. For example when the receiver thread receives a new message it immediately pushes the message to the decoder queue. That message waits in the decoder queue until the decoder has finished decoding all the messages prior to it. Once the decoder thread decodes the message it then calls an abstract method passing the decoded message as a parameter. Figure 2 shows the full system of message passing within the application.  \r\n\r\n\r\nAll data transmission and message passing is done through a modified real-time transfer protocol. This protocol sends custom packets through a udp connection to deliver messages between peers. The choice of udp over tcp was made after realizing the blocking nature of tcp on first attempts of building the system. Also when sending milliseconds of a music, the concern for packet loss decreases. Once implemented the real-time transfer protocol proved to be non-blocking as synchronous playback of audio between devices was realized.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}